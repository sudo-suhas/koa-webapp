#!/usr/bin/env node

'use strict';

/**
 * Module dependencies.
 */
require('babel-register')({
    plugins: ['transform-async-to-generator']
});
const http = require('http');

const app = require('src/app'),
    substratum = require('src/substratum'),
    dao = require('src/dao');

const { redisClient, logger } = substratum;

/**
 * Get port from environment and store in Koa.
 */
const port = normalizePort(process.env.PORT || '3001');

/**
 * Create HTTP server.
 */
const server = http.createServer(app.callback());

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

let shuttingDown = false;

['SIGINT', 'SIGTERM'].forEach(signal => {
    process.on(signal, shutdown);
});

/**
 * Normalize a port into a number, string, or false.
 * @param {string} val
 * @returns {number|string|boolean}
 */
function normalizePort(val) {
    const portNum = parseInt(val, 10);

    if (isNaN(portNum)) {
        // named pipe
        return val;
    }

    if (portNum >= 0) {
        // port number
        return portNum;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 * @param {Error} error
 */
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string' ?
        `Pipe ${port}` :
        `Port ${port}`;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            logger.error(`${bind} requires elevated privileges`);
            process.exit(1);
            break;
        case 'EADDRINUSE':
            logger.error(`${bind} is already in use`);
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string' ?
        `pipe ${addr}` :
        `port ${addr.port}`;
    logger.info(`Listening on ${bind}`);
}

/**
 * Shutdown all containers and client objects
 */
function shutdown() {
    if (!shuttingDown) {
        logger.info('Shutting down server. No more requests will be accepted.');
        shuttingDown = true;

        server.close();
        dao.close();
        redisClient.close();

        setTimeout(() => {
            process.exit();
        }, 5e3).unref();
    }
}
